#!/bin/bash

project_root=$(realpath $(dirname $0))

escaped_project_root=$(echo "$project_root" | sed 's/\//\\\//g')

print_remove_help() {
cat >&2 << EOF
Usage: ./foopak remove [OPTIONS...] MODULE
Remove module located in path 'foopak_modules/MODULE'

MODULE:		module to remove" >&2
		use './foopak list' to see all installed modules

OPTIONS:
	--help,-h	print this help message and exit
EOF
}

print_add_help() {
cat >&2 << EOF
Usage: ./foopak add [OPTIONS...] MODULE
Add module located in path MODULE from a git server to the project

MODULE:		path where the module resides in the git server. eg.:
		'rockerbacon/foopak-mock-module' adds the module from
		https://github.com/rockerbacon/foopak-mock-module

OPTIONS:
	--alias,-a	use different folder name for module
			default is MODULE with slashes
			replaced by underscores

	--tag,-t,	use specific tag or commit
	--commit,-c	default is the latest commit in the default remote

	--dir,-d	add module under different directory
			default is foopak_modules
			WARNING:
				modules outside 'foopak_modules'
				will not be scanned for commands

	--branch,-b	use specific branch
			default is the default remote branch

	--help,-h	print this help message and exit

EOF
}

remove() {
	###    DEFAULTS    ###
	module_home_relative_dir="foopak_modules"
	###    DEFAULTS    ###

	###    READ NAMED ARGS    ###
	reading_named_args=true
	while [ "$reading_named_args" == "true" ]; do
		option=$1
		case "$option" in
			--dir|-d)
				module_home_relative_dir=$2; shift 2
			;;

			--help|-h)
				print_remove_help
				exit 0
			;;

			--*|-*)
				echo "ERROR: Unknown option '$option'" >&2
				echo; print_remove_help
				exit 1
			;;

			*)
				reading_named_args=false
			;;
		esac
	done
	###    READ NAMED ARGS    ###

	###    READ POSITIONAL ARGS    ###
	module_alias=$1; shift

	if [ -z "$module_alias" ]; then
		echo "ERROR: please specify the module to remove" >&2
		echo >&2
		print_remove_help
		exit 1
	fi
	###    READ POSITIONAL ARGS    ###
	module_home_dir="$project_root/$module_home_relative_dir"

	module_relative_dir="$module_home_relative_dir/$module_alias"
	module_dir="$project_root/$module_relative_dir"

	if [ ! -d "$module_dir" ]; then
		echo "ERROR: module '$module_alias' not installed" >&2
		echo >&2
		print_remove_help
		exit 1
	fi

	git submodule deinit -f "$module_dir"
	git rm -f "$module_dir"
	rm -rf "$project_root/.git/modules/$module_relative_dir"
}

add() {
	###   DEFAULTS    ###
	git_server="https://github.com"
	module_home_relative_dir="foopak_modules"
	module_options=()
	###   DEFAULTS   ###

	###   READ NAMED ARGS    ###
	reading_named_args=true
	while [ "$reading_named_args" == "true" ]; do
		option=$1
		case "$option" in
			--alias|-a)
				module_alias=$2; shift 2
			;;

			--branch|-b)
				module_options+=("-b" "$2"); shift 2
			;;

			--commit|-c|--tag|-t)
				module_version=$2; shift 2
			;;

			--dir|-d)
				module_home_relative_dir=$2; shift 2
			;;

			--help|-h)
				print_add_help
				exit 0
			;;

			--*|-*)
				echo "ERROR: Unknown option '$option'" >&2
				echo; print_add_help
				exit 1
			;;

			*)
				reading_named_args=false
			;;
		esac
	done
	###   READ NAMED ARGS    ###

	###   READ POSITIONAL ARGS    ###
	module_path=$1; shift
	if [ "$module_path" == "" ]; then
		echo "ERROR: please specify a module to add" >&2
		echo >&2
		print_add_help
		exit 1
	fi

	if [ -z "$module_alias" ]; then
		module_alias=$module_path
	fi
	###   READ POSITIONAL ARGS    ###

	module_home_dir="$project_root/$module_home_relative_dir"

	module_parent_dir=$(dirname "$module_alias")
	if [ "${module_parent_dir:0:1}" != "." ]; then
		mkdir -p "$project_root/$module_parent_dir"
	fi

	module_install_path="$module_home_relative_dir/$module_alias"

	if [ -e "$module_install_path" ]; then
		echo "ERROR: could not add module: directory '$module_install_path' already exists" >&2
		exit 1
	fi

	cd "$project_root"
	git submodule add ${module_options[@]} $git_server/$module_path "$module_install_path"

	if [ -n "$module_version" ]; then
		restore_workdir=$PWD
		cd "$project_root/$module_install_path"
			git checkout $module_version; exit_status=$?
		cd "$restore_workdir"
		if [ "$exit_status" != "0" ]; then
			echo "ERROR: could not checkout version '$module_version', rolling back" >&2
			remove "$module_alias"
			exit 1
		fi
	fi

	exec 3< "$module_install_path/foopak_meta/command_list.conf"
		command_list_version=$(read -u 3)

		while read -u 3 command || [ -n "$command" ]; do
			[ -z "$command" ] && continue
			[ "${command:0:1}" == "#" ] && continue

			command=$(echo "$command" | sed "s/\s.*$//")

			conflicting_module=$( \
							find "$project_root/foopak_modules" \
								-not -path "$project_root/$module_install_path/*" \
								-path "*/foopak_meta/*" \
								-name command_list.conf \
				-exec	grep --with-filename -E "^$command\s" {} + \
					|		sed "s/$escaped_project_root\/foopak_modules\///; s/\/foopak_meta.*$//" \
			)

			if [ -n "$conflicting_module" ]; then
				echo "ERROR: could not add module: command '$command' conflicts with module '$conflicting_module'" >&2
				remove "$module_alias"
				exit 1
			fi
		done
	exec 3>&-
}

exec_module_command() {
	command_name=$1; shift

	# TODO cache command list
	command_script=$( \
					find "$project_root/foopak_modules" -path '*/foopak_meta/*' -name command_list.conf \
		-exec	grep --with-filename -E "^$command_name\s" {} + \
			|		sed "s/foopak_meta\/command_list\.conf.*\s//" \
	)

	if [ -z "$command_script" ]; then
		echo "ERROR: unknown command '$command_name'" >&2
		exit 1
	fi

	"$command_script" $@
}

command=$1; shift
case "$command" in
	remove|r)
		remove $@
	;;

	add|a)
		add $@
	;;

	*)
		exec_module_command $command $@
	;;
esac

